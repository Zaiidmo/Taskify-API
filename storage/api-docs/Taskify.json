{
	"info": {
		"_postman_id": "99e6840d-d7d8-46d1-98ba-391e7f45d63f",
		"name": "Taskify",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32635893"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - message and user\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message');",
									"    pm.expect(responseData).to.have.property('user');",
									"});",
									"",
									"",
									"pm.test(\"Email is a non-empty string and in a valid format\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData.user).to.be.an('object');",
									"  pm.expect(responseData.user.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");",
									"  pm.expect(responseData.user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email should be in a valid format\");",
									"});",
									"",
									"",
									"pm.test(\"ID is a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.user.id).to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"user\",\n    \"email\": \"usertest@email.com\",\n    \"password\": \"password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/register",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"register"
							]
						},
						"description": "This endpoint is used to register a user. Upon successful execution, it returns a JSON response containing a message and user details including name, email, creation and update timestamps, and user ID.\n\n### Request Body\n\n- name (string, required): The name of the user.\n- email (string, required): The email address of the user.\n- password (string, required): The password for the user account.\n    \n\n### Response\n\n- message (string): A message indicating the status of the registration process.\n- user (object): An object containing the details of the registered user including name, email, creation and update timestamps, and user ID.\n    \n\nExample:\n\n``` json\n{\n    \"message\": \"Registration successful\",\n    \"user\": {\n        \"name\": \"John Doe\",\n        \"email\": \"johndoe@example.com\",\n        \"updated_at\": \"2022-01-01T12:00:00\",\n        \"created_at\": \"2022-01-01T12:00:00\",\n        \"id\": 123\n    }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - user, authorization\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('user');",
									"    pm.expect(responseData).to.have.property('authorization');",
									"});",
									"",
									"",
									"pm.test(\"User object contains expected fields\", function () {",
									"    const responseData = pm.response.json().user;",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('email');",
									"    pm.expect(responseData).to.have.property('email_verified_at');",
									"    pm.expect(responseData).to.have.property('created_at');",
									"    pm.expect(responseData).to.have.property('updated_at');",
									"});",
									"",
									"pm.test(\"Authorization object contains expected fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.authorization).to.be.an('object');",
									"    pm.expect(responseData.authorization).to.have.property('token');",
									"    pm.expect(responseData.authorization).to.have.property('type');",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid email format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.user.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "usertest@email.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/login",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"login"
							]
						},
						"description": "\n# Login API\n\nThis API endpoint is used to authenticate and login a user.\n\n### Request Body\n- email (text): The email address of the user.\n- password (text): The password of the user.\n\n### Response\n- Status: 200\n- Content-Type: application/json\n\n#### Response Body\n```json\n{\n    \"user\": {\n        \"id\": 0,\n        \"name\": \"\",\n        \"email\": \"\",\n        \"email_verified_at\": null,\n        \"created_at\": \"\",\n        \"updated_at\": \"\"\n    },\n    \"authorization\": {\n        \"token\": \"\",\n        \"type\": \"\"\n    }\n}\n```\nThe response contains user information and an authorization token upon successful login.\n\n"
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required Content-Type header with value 'application/json'\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Message field is present in the response\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Response body is a valid JSON format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2xvZ2luIiwiaWF0IjoxNzA5MTExNjU4LCJleHAiOjE3MDkxMTUyNTgsIm5iZiI6MTcwOTExMTY1OCwianRpIjoiTnBPQlJXSEF0SThCYjBObCIsInN1YiI6IjciLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.TjWpUnMBVRLuy1_tLwlMUXWcaoFHgjnRWVd2Jx-zoqY",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/logout",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"logout"
							]
						},
						"description": "This endpoint is used to log out the user from the system. Upon successful execution, it returns a status code of 200 and a JSON response with a message indicating the success of the operation."
					},
					"response": []
				},
				{
					"name": "Refresh",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2xvZ2luIiwiaWF0IjoxNzA5MTExNjU4LCJleHAiOjE3MDkxMTUyNTgsIm5iZiI6MTcwOTExMTY1OCwianRpIjoiTnBPQlJXSEF0SThCYjBObCIsInN1YiI6IjciLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.TjWpUnMBVRLuy1_tLwlMUXWcaoFHgjnRWVd2Jx-zoqY",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/refresh",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"refresh"
							]
						}
					},
					"response": []
				}
			],
			"description": "These Are all the authentication Methods"
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Create a Task",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2xvZ2luIiwiaWF0IjoxNzA5MDUwMDAxLCJleHAiOjE3MDkwNTM2MDEsIm5iZiI6MTcwOTA1MDAwMSwianRpIjoiYjlzdlV1N09wMjdrSmJSVSIsInN1YiI6IjUiLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.mW4eii2IdnwtofmDr2S1l2g43c7un4Kx3rvLamo35_Q",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"testing\",\n    \"description\": \"sfadsgfasdg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/tasks",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Display My Tasks",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2xvZ2luIiwiaWF0IjoxNzA5MDUwMDAxLCJleHAiOjE3MDkwNTM2MDEsIm5iZiI6MTcwOTA1MDAwMSwianRpIjoiYjlzdlV1N09wMjdrSmJSVSIsInN1YiI6IjUiLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.mW4eii2IdnwtofmDr2S1l2g43c7un4Kx3rvLamo35_Q",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/tasks",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update My Task",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2xvZ2luIiwiaWF0IjoxNzA5MDUwMDAxLCJleHAiOjE3MDkwNTM2MDEsIm5iZiI6MTcwOTA1MDAwMSwianRpIjoiYjlzdlV1N09wMjdrSmJSVSIsInN1YiI6IjUiLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.mW4eii2IdnwtofmDr2S1l2g43c7un4Kx3rvLamo35_Q",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Task Title\",\n    \"description\": \"Updated Task Description\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/tasks/2",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"tasks",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete My Task",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2xvZ2luIiwiaWF0IjoxNzA5MDUwMDAxLCJleHAiOjE3MDkwNTM2MDEsIm5iZiI6MTcwOTA1MDAwMSwianRpIjoiYjlzdlV1N09wMjdrSmJSVSIsInN1YiI6IjUiLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.mW4eii2IdnwtofmDr2S1l2g43c7un4Kx3rvLamo35_Q",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/tasks/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"tasks",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Make It Done",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2xvZ2luIiwiaWF0IjoxNzA5MDcxODU0LCJleHAiOjE3MDkwNzU0NTQsIm5iZiI6MTcwOTA3MTg1NCwianRpIjoid2NLY3lXcnpPckdnTEprYSIsInN1YiI6IjUiLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.YRAE8bHXLIX8X040_g8AQYovCNbGkqoEcyPW-WTo6IY",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/tasks/2/done",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"tasks",
								"2",
								"done"
							]
						}
					},
					"response": []
				},
				{
					"name": "Make it Doing",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2xvZ2luIiwiaWF0IjoxNzA5MDcxODU0LCJleHAiOjE3MDkwNzU0NTQsIm5iZiI6MTcwOTA3MTg1NCwianRpIjoid2NLY3lXcnpPckdnTEprYSIsInN1YiI6IjUiLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.YRAE8bHXLIX8X040_g8AQYovCNbGkqoEcyPW-WTo6IY",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/tasks/2/doing",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"tasks",
								"2",
								"doing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Make it To Do",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjgwMDAvYXBpL2xvZ2luIiwiaWF0IjoxNzA5MDcxODU0LCJleHAiOjE3MDkwNzU0NTQsIm5iZiI6MTcwOTA3MTg1NCwianRpIjoid2NLY3lXcnpPckdnTEprYSIsInN1YiI6IjUiLCJwcnYiOiIyM2JkNWM4OTQ5ZjYwMGFkYjM5ZTcwMWM0MDA4NzJkYjdhNTk3NmY3In0.YRAE8bHXLIX8X040_g8AQYovCNbGkqoEcyPW-WTo6IY",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/tasks/2/todo",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"tasks",
								"2",
								"todo"
							]
						}
					},
					"response": []
				}
			],
			"description": "These Are all the Tasks Methods"
		}
	]
}